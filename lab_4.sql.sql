-- Active: 1721292127253@@127.0.0.1@3306@sakila
-- 1.List the number of films per category.
SELECT c.name, COUNT(f.film_id) AS "Number of films"
FROM category AS c
JOIN film_category AS f
ON c.category_id = f.category_id
GROUP BY c.name;
-- 2.Retrieve the store ID, city, and country for each store.
SELECT s.store_id, c.city, co.country 
FROM store AS s
JOIN address AS a
ON s.address_id = a.address_id
JOIN city AS c
ON a.city_id = c.city_id
JOIN country AS co
ON c.country_id = co.country_id;
-- 3. Calculate the total revenue generated by each store in dollars.
SELECT c.store_id, SUM(p.amount)
FROM payment AS p
JOIN customer AS c
ON p.customer_id = c.customer_id
GROUP BY c.store_id;
--4. Determine the average running time of films for each category.
SELECT c.name, AVG(f.length) AS "Average of running time"
FROM film AS f 
JOIN film_category AS fc
ON f.film_id = fc.film_id
JOIN category AS c
ON fc.category_id = c.category_id
GROUP BY c.name;
--5. Identify the film categories with the longest average running time.
SELECT c.name, AVG(f.length) AS "Average of running time"
FROM film AS f 
JOIN film_category AS fc
ON f.film_id = fc.film_id
JOIN category AS c
ON fc.category_id = c.category_id
GROUP BY c.name
ORDER BY AVG(f.length) DESC;
--6. Display the top 10 most frequently rented movies in descending order.
SELECT f.title, COUNT(r.rental_id)
FROM film AS f
JOIN inventory AS i
ON f.film_id = i.film_id
JOIN rental AS r
ON i.inventory_id = r.inventory_id
GROUP BY f.title
ORDER BY COUNT(r.rental_id) DESC;
--7. Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT f.title, s.store_id
FROM store AS s
JOIN inventory AS i
ON s.store_id = i.store_id
JOIN film AS f
ON i.film_id = f.film_id
GROUP BY f.title, s.store_id
HAVING f.title = "ACADEMY DINOSAUR" AND  s.store_id = 1;
--8. Provide a list of all distinct film titles, along with their availability status in the inventory. Include a column indicating whether each title is 'Available' or 'NOT available.' Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."
SELECT 
    title,
    CASE
        WHEN inventory_id IS NULL THEN 'NOT available'
        ELSE 'Available'
    END AS availability_status
FROM (
    SELECT DISTINCT
        f.title,
        i.inventory_id
    FROM 
        film f
    LEFT JOIN
        inventory i ON f.film_id = i.film_id
) AS film_availability
ORDER BY title;

